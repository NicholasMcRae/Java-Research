Item 1: Consider static factory methods instead of constructors
***************************************************************
- tradition for obtaining an instance is to provide a public constructor
- but this technique should be a part of our toolkit
- a class can provide a public static factory method
	- a static method that returns an instance of the class
- not the same as the Factory method pattern from Design Patterns
- instead of, or in addition to, public constructors
- has both advantages and disadvantages
- Advantages
	- Has a name
		- If constructor params do not describe the object being returned
		- client code is easier to  read
		- Class can only have a single constructor with a givensignature
		- Some get around this by providing constructors with param lists that differ in type
		- This is a bad idea
		- User of API won't remember which constructor is which and will call the wrong one by mistake
		- won't know what these constructors do without class documentation
		- when you need multiple constructors with the same signature that do different things
	- Not required to create a new object each time they're invoked
		- allows immutable classes to use preconstructed instances, or to cache instances as they are constructed, and dispense them repeatedly
		- it can greatly improve performance if equivalent objects are requested often, and if they are expensive to create
		- returning the same object from repeated invocations allows classes to maintain strict control over what instances exist at any time
		- said to be instance-controlled
		- allows a class to guarantee that it is a singleton
		- it also allows an immutable value class to make the guarantee thatno two equal instances exist
	- Can return an object of any subtype of their return type
		- Gives you great flexibility in choosing the class of the returned object
		- an API can return objects without making their classes public
		- hiding implementation classes in this fashion leads to a very compact API
		- IOW, can create subtypes of classes which are hidden from the API interface
	- class of the returned object can vary from call to call as a function of the input parameters
		- And subtype of the declared return type is permissable
- Limitation
	- Classes without public of protected constructors cannot be subclassed
		- can be a good things because it encourages programmers to use composition instead of inheritance
		- they are hard for programmers to find, they do not stand out in API documentation
		
Item 2: Consider a builder when faced with many constructor parameters
**********************************************************************
- static factors and constructors do not scale well to many params
- what sort of constructors or static factories should you write for such a class?
- Can use telescope method but it is unwieldy
- another approach is the JavaBean pattern (call setters)
- bean can be in an inconsistent state partway through its construction
- JavaBeans also can't make the class immutable
- luckily, there is a third alternative which combines safety of telescoping with readability of JavaBeans pattern
	- Is is a form of the Builder pattern
- using builder instead
	- instead of making object directly, client calls a constructor (or static factory) with all of the required parameters and gets a builder object
	- then the clicent calls setter like methods on the builder object to set each optional parameter of interest
	- finally the client calls a parameterless build method to generate the object, which is typically immutable
	- the builder is typically a static member class of the class it builds
- the NutritionFacts class is immutable and all parameter default values are in one place
- the builder's setter methods return the builder itself so that invocations can be chained, resulting in a fluent API
- the client code is easy to write, and more importantly, easy to read

Item 3: Enforce the singleton property with a private constructor or an enum type
*********************************************************************************
- a singleton is simply a class that is instantiated exactly once
- typically represent either a stateless object such as a function or a system component that is intrinsically unique
- making a class a singleton can make it difficult to test it's clients
- there are two common ways to implement singletons
	- both are based onkeeping the constructor private and exporting a public static member to provide access to the sole instance
- in one approach the member is a final field
	- public static final Elvis INSTANCE = new Elvis()
	- the private constructor is called only once, to initialize the public static final field
	- the lack of a public of protected constructor guarantees a single universe. Exactly one Elvis instance will exist once the class is initialized
	- nothing that a client does can change this
- Singleton classes are used for logging, driver objects, caching and thread pool, database connections

Item 4: Enforce noninstantiability with a private constructor
*************************************************************
- occasionally you'll want to write a class that is just a grouping of static methods and static fields
- some people avoid but they do have valid uses
- they can be used to group static methods, influcing factories
- such utility classes were not designed to be instantiated
- but java provides a default constructor
- can't enforce noninstantiability by making a class abstract

Item 5: Prefer dependency injection to hardwiring resources
***********************************************************
- many classes depend on one or more underlying resources
- i.e. dictionary, sometimes implemented as a static utility class
	- inflexible and untestable
- not uncommon to see them implemented as singletons
- neither approach is satisfactory because they assume there is only one dictionary worth using
- what is required is the ability to support multiple instances of the class
- a simple pattern is to pass the resource into the constructor when creating a new instance
	- this is one form of dependency injection
	- the dictionary is a dependency of the spell checker
	- injected into the spell checker when it is created
	
Item 6: Avoid Creating Unnecessary Objects
******************************************
- it is often appropriate to reuse a single object instead of creating a new, equivalent object each time it is needed
- an object can always be reused if it is immutable

Item 7: Eliminate Obsolete Object References
********************************************
- With Java you still do need to think about memory management
- memory leaks which can manifest itself as reduced performance due to increased garbage collector activity, inreased memory footprint
- null out references once they become obsolete

Item 8: Avoid Finalizers and Cleaners
*************************************
- finalizers have a few valid uses, but usually you should avoid them
- as of Java 9 finalizers have been deprecated
- The Java 9 replacement is cleaners, less dangerous but still unpredictable, slow, and generally unnecessary
- never do anything time-critical in a finalizer or cleaner
- big error to depend on a finalizer to close files
- it is about fifty times slower to create and destroy objects with finalizers

Item 9: Prefer Try With Resources, to Try Finally
*************************************************
- Many resources must be closed manually by invoking a close method
- while many resources use finalizers as a safety net, finalizers don't work very well
- these problems were solved in one fell swoop when Java 7 introduced the try-with-resources statement
- to be usable with this construct, a resource must implement the AutoCloseable interface